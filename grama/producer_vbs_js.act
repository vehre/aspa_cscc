@import :
/*
    This file is part of Aspa.

    Aspa is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Aspa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Aspa; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
import org.apache.log4j.Logger;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Set;
import java.util.HashSet;
import gr.omadak.leviathan.asp.objects.ObjectAST;

@init : {
	private static Logger LOG = Logger.getLogger(VbsJsGenerator.class);
	
	public void setWriter(Writer writer) {
        out = new SourceBuffer(new PrintWriter(writer), false);
    }
    
    public static final int OBJECT = CommonConstants.OBJECT;
    public static final int OBJECT_RET = CommonConstants.OBJECT_RET;
}


@int : { out.print(#DINT.getText()); }
@float : { out.print(#DFLOAT.getText()); }
@id : {
    if (inClass && ids.contains(#IDENTIFIER.getText())) {
        out.print("this.");
    }
    out.print(#IDENTIFIER.getText()); 
}
@string : { out.print(out.makeString(#DSTRING.getText())); }
@true : { out.print("true"); }
@false : { out.print("false"); }
@null : { out.print("null"); }
@date : { 
/*I think dates are in formad d-m-y */
LOG.warn("Possible problem with date:" + #DDATE.getText());
out.print("strtotime(\"" + #DDATE.getText() + "\""); 
}

@cast : {
    String type = #CAST.getText();
    if (type != null) {
        out.print("(" + type + ") ");
    }
}

@var_decl : { out.print("var "); boolean firstVarSeen = false; }
@next_var : { if(firstVarSeen){ out.print(", "); } firstVarSeen = true; } 
@const_decl : { out.print("const "); boolean firstConstSeen = false; }
@next_const : { if(firstConstSeen){ out.print(", "); } firstConstSeen = true; }
 
@quest : { out.print(" ? "); }
@alt : { out.print(" : "); }

@exp_end : { out.println(";"); }

@xor : { out.print(" xor "); }
@or : { out.print(" || "); }
@and : { out.print(" && "); }
@bor : { out.print(" | "); }
@band : { out.print(" & "); }
@bxor : { out.print(" ^ "); }
@lt : { out.print(" < "); }
@gt : { out.print(" > "); }
@le : { out.print(" <= "); }
@ge : { out.print(" >= "); }
@eq : { out.print(" == "); }
@assign : { out.print(" = "); }
@cassign : { out.print(" += "); }
@passign : { out.print(" += "); }
@minassign : { out.print(" -= "); }
@modassign : { out.print(" %= "); }
@sassign : { out.print(" *= "); }
@dassign : { out.print(" /= "); }
@neq : { out.print(" != "); }
@is : { out.print(" == "); }
@concat : { out.print(" + "); }
@plus : { out.print(" + "); }
@minus : { out.print(" - "); }
@mod : { out.print(" % "); }
@star : { out.print(" * "); }
@div : { out.print(" / "); }
@uplas : { out.print("+"); }
@umin : { out.print("-"); }

@not : { out.print('!'); }
@bnot : { out.print("~"); }

@post_plus : { out.print("++"); }
@post_minus : { out.print("--"); }
@method : { out.print(#METHOD_CALL.getText()); }
@CCobject_ret : {
	if ( #OBJECT_RET instanceof ObjectAST ) {
		ObjectAST oAST = (ObjectAST) #OBJECT_RET;
		expression(oAST.getInstance().getInstance());
	} else 
		out.print(#OBJECT_RET.getText()); 
}
@CCobject : {
	if ( #OBJECT instanceof ObjectAST ) {
		ObjectAST oAST = (ObjectAST) #OBJECT;
		expression(oAST.getInstance().getInstance());
	} else 
		out.print(#OBJECT.getText()); 
}
@dot : { out.print("."); }
@no_args : { out.print("()"); }
@arg_init : { boolean isFirst = true; out.print('('); }
@arg : {
    if (!isFirst) {
        out.print(", ");
    } else {
        isFirst = false;
    }
}
@arg_end : { out.print(')'); }

@html : {
    out.printHTML(#HTML.getText());
}


@include : {
    out.println("import '" + #INCLUDE.getText() + "';");
}

@eq_html : {
    out.print("document.write ");
}

@pre_index : { out.print('['); }
@post_index : { out.print(']'); }

@switch : { out.print("switch ("); }
@switch_end : { out.println(") {"); }
@case : { out.print("case ");}
@case_expr_end : {
    out.println(" :");
    out.incLevel();
}
@case_end : { out.decLevel(); }

@default : { out.println("default :"); out.incLevel();}
@break : { out.println("break;"); }
@continue : { out.println("continue;"); }

@nested_end : {
    out.decLevel();
    out.println("}");
}

@uknown_method : {
    out.print("/* Unknown method:" + #UKNOWN_METHOD.getText() + "*/ "
    + #UKNOWN_METHOD.getText());
}

@if : {
    out.print("if (");
}
@if_expr : {
    out.println(") {");
    out.incLevel();
}
@elseif : {
    out.decLevel();
    out.print("} else if (");
}
@elseif_expr : {
    out.println(") {");
    out.incLevel();
}
@else : {
    out.decLevel();
    out.println("} else {");
    out.incLevel();
}

@while : { out.print("while (");}
@while_expr : { out.println(") {"); out.incLevel();}

@do : {
    out.println("do {");
    out.incLevel();
}
@do_end : {
    out.decLevel();
    out.print("} while (");
}
@do_expr : {
    out.println(");");
}

@finit : {
    out.print("for (");
}
@fexpr1 : {
    out.print("; ");
}
@fexpr3 : {
    out.println(") {");
    out.incLevel();
}
@foreach : { out.print("foreach ("); }
@foreach_expr : { out.print(" as "); }
@foreach_end : { out.println(") {"); out.incLevel(); }

@return : { out.print("return "); }
@function : {
    boolean hasGlobals = false;
    out.print("function " + #FUNCTION.getText() + "(");
}
@arglist_init : { boolean firstArg = true; }
@byref : {
    if (!firstArg) {
        out.print(", ");
    } else {
        firstArg = false;
    }
    out.print("&" + #BYREF.getText());
}
@arg_id : {
    if (!firstArg) {
        out.print(", ");
    } else {
        firstArg = false;
    }
    out.print(#IDENTIFIER.getText());
}
@arglist_end : {
    out.println(") {");
    out.incLevel();
}
@glob_init : {
	LOG.error("GLOBAL node found in function. This should not happen in vbscript to javascript conversion.");
}
@id_glob : {
	LOG.error("Global identifier: '" + #IDENTIFIER.getText() + "' declared.");
}

@func_end : !

@nhead : {
    out.print("/*Unsupported Header*/\"" + #NON_APPLICABLE_HEADER.getText() + "\"");
}
@inv_obj : {
    out.print("/*Unknown object*/\""
    + #INVALID_OBJECT.getText() + "\"");
}
@const : { out.print(#CONSTANT.getText()); }
@embedded_asp : { out.print(#EMBEDDED_ASP.getText()); }
@lp : { out.print('('); }
@lp_end : { out.print(')'); }

@new : {
    out.print("new " + #IDENTIFIER.getText());
}

@class : {
    inClass = true;
    out.println("class " + #CLASS.getText() + " {");
    out.incLevel();
}
@class_end : {
    inClass = false;
    ids.clear();
}
@cid : {
    out.println("var " + #IDENTIFIER.getText() + ";");
    ids.add(#IDENTIFIER.getText());
}
@end : { out.end();}
